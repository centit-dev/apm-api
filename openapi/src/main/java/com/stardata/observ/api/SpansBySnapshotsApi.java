/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.stardata.observ.vo.CommonResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.stardata.observ.vo.SpanListResponse;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "服务诊断", description = "the 服务诊断 API")
public interface SpansBySnapshotsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /spans-by-snapshots : 按条件查询Span
     * 应使用/spans
     *
     * @param spanSnapshotId span快照ID，如果有多个快照则用数组给出 (required)
     * @param conditions     在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。 (optional)
     * @param pageNo         查询指定的页号 (optional)
     * @param pageSize       对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10. (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
            operationId = "querySpanBySnapshots",
            summary = "按条件查询Span",
            description = "应使用/spans",
            deprecated = true,
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SpanListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/spans-by-snapshots",
            produces = {"application/json"}
    )

    default ResponseEntity<SpanListResponse> querySpanBySnapshots(
            @NotNull @Parameter(name = "spanSnapshotId", description = "span快照ID，如果有多个快照则用数组给出", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "spanSnapshotId", required = true) List<String> spanSnapshotId,
            @Parameter(name = "conditions", description = "在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conditions", required = false) String conditions,
            @Parameter(name = "pageNo", description = "查询指定的页号", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNo", required = false) Integer pageNo,
            @Parameter(name = "pageSize", description = "对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"spans\" : [ { \"traceId\" : \"traceId\", \"cluster\" : \"cluster\", \"instance\" : \"instance\", \"software\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"serviceName\" : \"serviceName\", \"parentSpanId\" : \"parentSpanId\", \"platform\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"spanName\" : \"spanName\", \"spanId\" : \"spanId\", \"duration\" : 7, \"logCount\" : 9, \"application\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"timestamp\" : 2 }, { \"traceId\" : \"traceId\", \"cluster\" : \"cluster\", \"instance\" : \"instance\", \"software\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"serviceName\" : \"serviceName\", \"parentSpanId\" : \"parentSpanId\", \"platform\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"spanName\" : \"spanName\", \"spanId\" : \"spanId\", \"duration\" : 7, \"logCount\" : 9, \"application\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"timestamp\" : 2 } ], \"pageCount\" : 5, \"pageNo\" : 6, \"pageSize\" : 1, \"totalCount\" : 5 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
