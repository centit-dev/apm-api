/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;

import com.stardata.observ.vo.CommonResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.stardata.observ.vo.QueryTemplateListResponse;
import com.stardata.observ.vo.QueryTemplateRequest;
import com.stardata.observ.vo.QueryTemplateResponse;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "查询模板", description = "the 查询模板 API")
public interface QueryTemplatesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /query-templates : 创建查询模板
     * 20240208，查询模板请求中，type改为枚举类型
     *
     * @param queryTemplateRequest (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "createQueryTemplate",
            summary = "创建查询模板",
            description = "20240208，查询模板请求中，type改为枚举类型",
            tags = {"查询模板", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = QueryTemplateResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/query-templates",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<QueryTemplateResponse> createQueryTemplate(
            @Parameter(name = "QueryTemplateRequest", description = "") @Valid @RequestBody(required = false) QueryTemplateRequest queryTemplateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"name\" : \"name\", \"id\" : 6, \"timeCondition\" : { \"fromTime\" : 5, \"recentSeconds\" : 2, \"toTime\" : 5 } }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /query-templates/{templateId} : 删除查询模板
     * 删除搜索模板
     *
     * @param templateId 传入参数为模板ID，根据模板ID获取搜索条件 (required)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "deleteQueryTemplate",
            summary = "删除查询模板",
            description = "删除搜索模板",
            tags = {"查询模板"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/query-templates/{templateId}",
            produces = {"application/json"}
    )

    default ResponseEntity<CommonResponse> deleteQueryTemplate(
            @Parameter(name = "templateId", description = "传入参数为模板ID，根据模板ID获取搜索条件", required = true, in = ParameterIn.PATH) @PathVariable("templateId") String templateId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /query-templates : 获取查询模板列表
     *
     * @param type  1-Trace异常搜索模板；2-日志异常搜索模板； (optional)
     * @param limit 获取该用户的查询模板记录数，默认情况下服务器最多返回10条 (optional)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "listQueryTemplates",
            summary = "获取查询模板列表",
            description = "",
            tags = {"查询模板"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = QueryTemplateListResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/query-templates",
            produces = {"application/json"}
    )

    default ResponseEntity<QueryTemplateListResponse> listQueryTemplates(
            @Parameter(name = "type", description = "1-Trace异常搜索模板；2-日志异常搜索模板；", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) Integer type,
            @Parameter(name = "limit", description = "获取该用户的查询模板记录数，默认情况下服务器最多返回10条", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"name\" : \"name\", \"id\" : 6, \"timeCondition\" : { \"fromTime\" : 5, \"recentSeconds\" : 2, \"toTime\" : 5 } }, { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"name\" : \"name\", \"id\" : 6, \"timeCondition\" : { \"fromTime\" : 5, \"recentSeconds\" : 2, \"toTime\" : 5 } } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /query-templates/{templateId} : 更新搜索模板
     * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
     *
     * @param templateId           传入参数为模板ID，根据模板ID获取搜索条件 (required)
     * @param queryTemplateRequest (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "updateQueryTemplate",
            summary = "更新搜索模板",
            description = "20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。",
            tags = {"查询模板", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = QueryTemplateResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/query-templates/{templateId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<QueryTemplateResponse> updateQueryTemplate(
            @Parameter(name = "templateId", description = "传入参数为模板ID，根据模板ID获取搜索条件", required = true, in = ParameterIn.PATH) @PathVariable("templateId") String templateId,
            @Parameter(name = "QueryTemplateRequest", description = "") @Valid @RequestBody(required = false) QueryTemplateRequest queryTemplateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"name\" : \"name\", \"id\" : 6, \"timeCondition\" : { \"fromTime\" : 5, \"recentSeconds\" : 2, \"toTime\" : 5 } }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
