/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;

import com.stardata.observ.vo.CommonResponse;
import com.stardata.observ.vo.FaultTrendResponse;
import com.stardata.observ.vo.HeatmapResponse;
import com.stardata.observ.vo.SnapshotResponse;
import com.stardata.observ.vo.SpanGroupListResponse;
import com.stardata.observ.vo.SpanSnapshotConditionListResponse;
import com.stardata.observ.vo.SpanSnapshotResponse;
import com.stardata.observ.vo.SpanSubSnapshotRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.stardata.observ.vo.CreateSpanSnapshotRequest;
import com.stardata.observ.vo.SpanCommonalityListResponse;
import com.stardata.observ.vo.SpanGroupField;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "故障定位/Trace异常定位", description = "the 故障定位/Trace异常定位 API")
public interface SpanSnapshotsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /span-snapshots : 创建Span快照
     * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
     *
     * @param createSpanSnapshotRequest (optional)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "createSpanSnapshot",
            summary = "创建Span快照",
            description = "根据条件创建span快照，返回快照ID  20240208，返回通用快照结构",
            tags = {"故障定位/Trace异常定位", "引导式定位/snapshots查询快照", "要导出的接口", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SnapshotResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/span-snapshots",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<SnapshotResponse> createSpanSnapshot(
            @Parameter(name = "CreateSpanSnapshotRequest", description = "") @Valid @RequestBody(required = false) CreateSpanSnapshotRequest createSpanSnapshotRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : \"data\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /span-snapshots/{snapshotId}/subSnapshots : 创建span子快照
     * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
     *
     * @param snapshotId             用于创建子快照的父快照ID (required)
     * @param spanSubSnapshotRequest (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "createSubSpanSnapshot",
            summary = "创建span子快照",
            description = "根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；",
            tags = {"故障定位/Trace异常定位", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SnapshotResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/span-snapshots/{snapshotId}/subSnapshots",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<SnapshotResponse> createSubSpanSnapshot(
            @Parameter(name = "snapshotId", description = "用于创建子快照的父快照ID", required = true, in = ParameterIn.PATH) @PathVariable("snapshotId") String snapshotId,
            @Parameter(name = "SpanSubSnapshotRequest", description = "") @Valid @RequestBody(required = false) SpanSubSnapshotRequest spanSubSnapshotRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : \"data\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-snapshots/{snapshotId}/fault-trend : 获取span报错趋势解析
     * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     *
     * @param snapshotId  (required)
     * @param granularity 解析span的时间颗粒度，单位是秒，空表示自动。 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "getSpanFaultTrend",
            summary = "获取span报错趋势解析",
            description = "获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。",
            tags = {"故障定位/Trace异常定位", "20231104", "20240113", "20240118", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = FaultTrendResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-snapshots/{snapshotId}/fault-trend",
            produces = {"application/json"}
    )

    default ResponseEntity<FaultTrendResponse> getSpanFaultTrend(
            @Parameter(name = "snapshotId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("snapshotId") String snapshotId,
            @Parameter(name = "granularity", description = "解析span的时间颗粒度，单位是秒，空表示自动。", in = ParameterIn.QUERY) @Valid @RequestParam(value = "granularity", required = false) Integer granularity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"granularity\" : 5, \"values\" : [ { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 }, { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 } ], \"fromTime\" : 6, \"toTime\" : 1 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-snapshots/{snapshotId}/heatmap : 获取span热点图趋势解析
     * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     *
     * @param snapshotId  (required)
     * @param granularity 解析span的时间颗粒度，单位是秒，空表示自动。 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "getSpanHeatmap",
            summary = "获取span热点图趋势解析",
            description = "获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。",
            tags = {"故障定位/Trace异常定位", "20231104", "20240113", "20240118", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = HeatmapResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-snapshots/{snapshotId}/heatmap",
            produces = {"application/json"}
    )

    default ResponseEntity<HeatmapResponse> getSpanHeatmap(
            @Parameter(name = "snapshotId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("snapshotId") String snapshotId,
            @Parameter(name = "granularity", description = "解析span的时间颗粒度，单位是秒，空表示自动。", in = ParameterIn.QUERY) @Valid @RequestParam(value = "granularity", required = false) Integer granularity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"timeGranularity\" : 2, \"durationGranularity\" : 7, \"fromDuration\" : 5, \"values\" : [ [ { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 }, { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 } ], [ { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 }, { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 } ] ], \"fromTime\" : 6, \"toDuration\" : 5, \"toTime\" : 1 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-snapshots/{snapshotId} : 获取快照
     *
     * @param snapshotId (required)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "getSpanSnapshot",
            summary = "获取快照",
            description = "",
            tags = {"故障定位/Trace异常定位"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SpanSnapshotResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-snapshots/{snapshotId}",
            produces = {"application/json"}
    )

    default ResponseEntity<SpanSnapshotResponse> getSpanSnapshot(
            @Parameter(name = "snapshotId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("snapshotId") String snapshotId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"timeWindow\" : { \"fromTime\" : 0, \"toTime\" : 6 }, \"snapshotId\" : \"snapshotId\", \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"durationInterval\" : { \"min\" : 1, \"max\" : 5 } }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /span-snapshots/{spanSnapshotId}/groups : 将span快照按条件分组
     * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
     *
     * @param spanSnapshotId 用于进行span快照分组的span父快照ID (required)
     * @param spanGroupField (optional)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "groupSpanSnapshots",
            summary = "将span快照按条件分组",
            description = "根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。",
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SpanGroupListResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/span-snapshots/{spanSnapshotId}/groups",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<SpanGroupListResponse> groupSpanSnapshots(
            @Parameter(name = "spanSnapshotId", description = "用于进行span快照分组的span父快照ID", required = true, in = ParameterIn.PATH) @PathVariable("spanSnapshotId") String spanSnapshotId,
            @Parameter(name = "SpanGroupField", description = "") @Valid @RequestBody(required = false) List<@Valid SpanGroupField> spanGroupField
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"groups\" : [ { \"snapshotId\" : \"snapshotId\", \"innormalCount\" : 6, \"callCount\" : 1, \"innormalFirstServices\" : [ \"innormalFirstServices\", \"innormalFirstServices\" ], \"innormalInstances\" : [ \"innormalInstances\", \"innormalInstances\" ], \"labels\" : [ \"labels\", \"labels\" ] }, { \"snapshotId\" : \"snapshotId\", \"innormalCount\" : 6, \"callCount\" : 1, \"innormalFirstServices\" : [ \"innormalFirstServices\", \"innormalFirstServices\" ], \"innormalInstances\" : [ \"innormalInstances\", \"innormalInstances\" ], \"labels\" : [ \"labels\", \"labels\" ] } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-snapshots/{snapshotId}/commonalities : 获取span共性识别结果
     * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
     *
     * @param snapshotId 用于进行共性分析的span快照ID (required)
     * @param limit      用来获取共有属性的个数 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "identifySpanCommonalities",
            summary = "获取span共性识别结果",
            description = "识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。",
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SpanCommonalityListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-snapshots/{snapshotId}/commonalities",
            produces = {"application/json"}
    )

    default ResponseEntity<SpanCommonalityListResponse> identifySpanCommonalities(
            @Parameter(name = "snapshotId", description = "用于进行共性分析的span快照ID", required = true, in = ParameterIn.PATH) @PathVariable("snapshotId") String snapshotId,
            @Parameter(name = "limit", description = "用来获取共有属性的个数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"displayName\" : \"displayName\", \"values\" : [ { \"code\" : \"code\", \"value\" : 0.6027456183070403 }, { \"code\" : \"code\", \"value\" : 0.6027456183070403 } ], \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"values\" : [ { \"code\" : \"code\", \"value\" : 0.6027456183070403 }, { \"code\" : \"code\", \"value\" : 0.6027456183070403 } ], \"name\" : \"name\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-snapshots/{snapshotId}/subSnapshots/conditions : 获取span子快照条件列表
     * 列出指定span快照ID下的子快照条件列表 replace usergroup history
     *
     * @param snapshotId 用于创建子快照的父快照ID (required)
     * @param limit      获取该用户的span解析记录数，默认情况下服务器最多返回10条 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "listSpanAnalysisConditions",
            summary = "获取span子快照条件列表",
            description = "列出指定span快照ID下的子快照条件列表 replace usergroup history",
            tags = {"故障定位/Trace异常定位", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SpanSnapshotConditionListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-snapshots/{snapshotId}/subSnapshots/conditions",
            produces = {"application/json"}
    )

    default ResponseEntity<SpanSnapshotConditionListResponse> listSpanAnalysisConditions(
            @Parameter(name = "snapshotId", description = "用于创建子快照的父快照ID", required = true, in = ParameterIn.PATH) @PathVariable("snapshotId") String snapshotId,
            @Parameter(name = "limit", description = "获取该用户的span解析记录数，默认情况下服务器最多返回10条", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"timeWindow\" : { \"fromTime\" : 0, \"toTime\" : 6 }, \"snapshotId\" : \"snapshotId\", \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"durationInterval\" : { \"min\" : 1, \"max\" : 5 } }, { \"fieldConditions\" : [ { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } }, { \"name\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"value\" : \"value\", \"operator\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" } } ], \"timeWindow\" : { \"fromTime\" : 0, \"toTime\" : 6 }, \"snapshotId\" : \"snapshotId\", \"statusConditions\" : [ { \"minDelay\" : 1, \"trend\" : \"up\" }, { \"minDelay\" : 1, \"trend\" : \"up\" } ], \"durationInterval\" : { \"min\" : 1, \"max\" : 5 } } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
