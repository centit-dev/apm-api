/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.stardata.observ.vo.CommonResponse;
import com.stardata.observ.vo.TraceListResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Trace查询", description = "the Trace查询 API")
public interface TracesBySnapshotsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /traces-by-snapshots : 获取Trace列表
     * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
     *
     * @param spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。 (required)
     * @param pageNo         访问页码 (optional)
     * @param pageSize       页面数据量，默认值20 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "listTracesBySpanSnapshots",
            summary = "获取Trace列表",
            description = "提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询",
            tags = {"Trace查询", "1201修改", "20240113", "20240116", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = TraceListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/traces-by-snapshots",
            produces = {"application/json"}
    )

    default ResponseEntity<TraceListResponse> listTracesBySpanSnapshots(
            @NotNull @Parameter(name = "spanSnapshotId", description = "span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "spanSnapshotId", required = true) List<String> spanSnapshotId,
            @Parameter(name = "pageNo", description = "访问页码", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNo", required = false) Integer pageNo,
            @Parameter(name = "pageSize", description = "页面数据量，默认值20", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"total\" : 6, \"pageNo\" : 5, \"pageSize\" : 1, \"content\" : [ { \"traceId\" : \"traceId\", \"duration\" : 2, \"endpointAddress\" : \"endpointAddress\", \"spanCount\" : 7, \"appCluster\" : \"appCluster\", \"instanceNames\" : [ \"instanceNames\", \"instanceNames\" ], \"firstService\" : \"firstService\", \"startTime\" : 5, \"status\" : \"Unknown\", \"platforms\" : [ { \"displayName\" : \"displayName\", \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"name\" : \"name\" } ], \"applications\" : [ { \"displayName\" : \"displayName\", \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"name\" : \"name\" } ] }, { \"traceId\" : \"traceId\", \"duration\" : 2, \"endpointAddress\" : \"endpointAddress\", \"spanCount\" : 7, \"appCluster\" : \"appCluster\", \"instanceNames\" : [ \"instanceNames\", \"instanceNames\" ], \"firstService\" : \"firstService\", \"startTime\" : 5, \"status\" : \"Unknown\", \"platforms\" : [ { \"displayName\" : \"displayName\", \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"name\" : \"name\" } ], \"applications\" : [ { \"displayName\" : \"displayName\", \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"name\" : \"name\" } ] } ] }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
