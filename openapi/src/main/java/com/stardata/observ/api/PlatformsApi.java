/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.stardata.observ.vo.CommonResponse;
import com.stardata.observ.vo.InstanceListResponse;
import com.stardata.observ.vo.InstanceRedResponse;
import com.stardata.observ.vo.NameDisplayListResponse;
import com.stardata.observ.vo.TomcatStatusListResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.stardata.observ.vo.HeatmapResponse;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "应用架构查询", description = "the 应用架构查询 API")
public interface PlatformsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /platforms/heatmap : 获取集群热点图
     *
     * @param snapshotId  (required)
     * @param granularity 统计数据的时间颗粒度，单位为秒，空则自动 (optional)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "getClusterHeatmap",
            summary = "获取集群热点图",
            description = "",
            tags = {"应用架构查询"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = HeatmapResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms/heatmap",
            produces = {"application/json"}
    )

    default ResponseEntity<HeatmapResponse> getClusterHeatmap(
            @NotNull @Parameter(name = "snapshotId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "snapshotId", required = true) String snapshotId,
            @Parameter(name = "granularity", description = "统计数据的时间颗粒度，单位为秒，空则自动", in = ParameterIn.QUERY) @Valid @RequestParam(value = "granularity", required = false) Integer granularity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"timeGranularity\" : 2, \"durationGranularity\" : 7, \"fromDuration\" : 5, \"values\" : [ [ { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 }, { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 } ], [ { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 }, { \"businessFaultCount\" : 9, \"successCount\" : 2, \"systemFaultCount\" : 3 } ] ], \"fromTime\" : 6, \"toDuration\" : 5, \"toTime\" : 1 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /platforms/{platform}/app-clusters/{cluster}/red : 获取实例RED数据
     *
     * @param platform      (required)
     * @param cluster       (required)
     * @param instanceName  统计应用集群下某个具体实例 (optional)
     * @param serviceName   (optional)
     * @param timeType      表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围 (optional)
     * @param fromTime      指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param toTime        指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param recentSeconds timeType为1时，最近时间的秒数，整数 (optional)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "getClusterRed",
            summary = "获取实例RED数据",
            description = "",
            tags = {"应用架构查询"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InstanceRedResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms/{platform}/app-clusters/{cluster}/red",
            produces = {"application/json"}
    )

    default ResponseEntity<InstanceRedResponse> getClusterRed(
            @Parameter(name = "platform", description = "", required = true, in = ParameterIn.PATH) @PathVariable("platform") String platform,
            @Parameter(name = "cluster", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cluster") String cluster,
            @Parameter(name = "instanceName", description = "统计应用集群下某个具体实例", in = ParameterIn.QUERY) @Valid @RequestParam(value = "instanceName", required = false) String instanceName,
            @Parameter(name = "serviceName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "serviceName", required = false) String serviceName,
            @Parameter(name = "timeType", description = "表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeType", required = false) Integer timeType,
            @Parameter(name = "fromTime", description = "指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromTime", required = false) Long fromTime,
            @Parameter(name = "toTime", description = "指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "toTime", required = false) Long toTime,
            @Parameter(name = "recentSeconds", description = "timeType为1时，最近时间的秒数，整数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "recentSeconds", required = false) Integer recentSeconds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"durationP90\" : 5, \"calls\" : 6, \"successRate\" : 1.4658129805029452, \"serviceName\" : \"serviceName\", \"spanName\" : \"spanName\" }, { \"durationP90\" : 5, \"calls\" : 6, \"successRate\" : 1.4658129805029452, \"serviceName\" : \"serviceName\", \"spanName\" : \"spanName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /platforms/{platform}/app-clusters/{cluster}/tomcat-status : 获取tomcat状态趋势
     *
     * @param platform      (required)
     * @param cluster       (required)
     * @param instanceName  统计应用集群下某个具体实例 (optional)
     * @param timeType      表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围 (optional)
     * @param fromTime      指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param toTime        指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param recentSeconds timeType为1时，最近时间的秒数，整数 (optional)
     * @param granularity   统计数据的时间颗粒度，单位为秒，空则自动 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "getTomcatStatus",
            summary = "获取tomcat状态趋势",
            description = "",
            tags = {"应用架构查询"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = TomcatStatusListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms/{platform}/app-clusters/{cluster}/tomcat-status",
            produces = {"application/json"}
    )

    default ResponseEntity<TomcatStatusListResponse> getTomcatStatus(
            @Parameter(name = "platform", description = "", required = true, in = ParameterIn.PATH) @PathVariable("platform") String platform,
            @Parameter(name = "cluster", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cluster") String cluster,
            @Parameter(name = "instanceName", description = "统计应用集群下某个具体实例", in = ParameterIn.QUERY) @Valid @RequestParam(value = "instanceName", required = false) String instanceName,
            @Parameter(name = "timeType", description = "表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeType", required = false) Integer timeType,
            @Parameter(name = "fromTime", description = "指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromTime", required = false) Long fromTime,
            @Parameter(name = "toTime", description = "指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "toTime", required = false) Long toTime,
            @Parameter(name = "recentSeconds", description = "timeType为1时，最近时间的秒数，整数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "recentSeconds", required = false) Integer recentSeconds,
            @Parameter(name = "granularity", description = "统计数据的时间颗粒度，单位为秒，空则自动", in = ParameterIn.QUERY) @Valid @RequestParam(value = "granularity", required = false) Integer granularity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"granularity\" : 5, \"values\" : [ { \"requestCount\" : 7, \"activeSessions\" : 2, \"threads\" : 5 }, { \"requestCount\" : 7, \"activeSessions\" : 2, \"threads\" : 5 } ], \"fromTime\" : 6, \"toTime\" : 1 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /platforms/{platform}/app-clusters : 获取平面下应用集群列表
     * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
     *
     * @param platform 平面编码名称（非显示名称） (required)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "listAppClusters",
            summary = "获取平面下应用集群列表",
            description = "获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造",
            tags = {"应用架构查询", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = NameDisplayListResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms/{platform}/app-clusters",
            produces = {"application/json"}
    )

    default ResponseEntity<NameDisplayListResponse> listAppClusters(
            @Parameter(name = "platform", description = "平面编码名称（非显示名称）", required = true, in = ParameterIn.PATH) @PathVariable("platform") String platform
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"displayName\" : \"displayName\", \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"name\" : \"name\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /platforms/{platform}/app-clusters/{cluster}/app-instances : 获取集群下应用实例列表
     * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
     *
     * @param platform      望京平面 (required)
     * @param cluster       营业厅接入的订单中心 (required)
     * @param timeType      表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围 (optional)
     * @param fromTime      指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param toTime        指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param recentSeconds timeType为1时，最近时间的秒数，整数 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "listAppInstances",
            summary = "获取集群下应用实例列表",
            description = "获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型",
            tags = {"应用架构查询", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InstanceListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms/{platform}/app-clusters/{cluster}/app-instances",
            produces = {"application/json"}
    )

    default ResponseEntity<InstanceListResponse> listAppInstances(
            @Parameter(name = "platform", description = "望京平面", required = true, in = ParameterIn.PATH) @PathVariable("platform") String platform,
            @Parameter(name = "cluster", description = "营业厅接入的订单中心", required = true, in = ParameterIn.PATH) @PathVariable("cluster") String cluster,
            @Parameter(name = "timeType", description = "表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeType", required = false) Integer timeType,
            @Parameter(name = "fromTime", description = "指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromTime", required = false) Long fromTime,
            @Parameter(name = "toTime", description = "指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "toTime", required = false) Long toTime,
            @Parameter(name = "recentSeconds", description = "timeType为1时，最近时间的秒数，整数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "recentSeconds", required = false) Integer recentSeconds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"name\" : \"name\", \"resources\" : [ { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" }, { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" } ] }, { \"name\" : \"name\", \"resources\" : [ { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" }, { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" } ] } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /platforms : 获得平面列表
     * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
     *
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "listPlatforms",
            summary = "获得平面列表",
            description = "获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。",
            tags = {"应用架构查询", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = NameDisplayListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms",
            produces = {"application/json"}
    )

    default ResponseEntity<NameDisplayListResponse> listPlatforms(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"displayName\" : \"displayName\", \"name\" : \"name\" }, { \"displayName\" : \"displayName\", \"name\" : \"name\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /platforms/{platform}/softwares/{software}/instances : 获取集群下软件实例列表
     * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
     *
     * @param platform      望京平面 (required)
     * @param software      软件服务在k8s中的deployment名称 (required)
     * @param timeType      表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围 (optional)
     * @param fromTime      指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param toTime        指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数 (optional)
     * @param recentSeconds timeType为1时，最近时间的秒数，整数 (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "listSoftwareInstances",
            summary = "获取集群下软件实例列表",
            description = "获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型",
            tags = {"应用架构查询", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InstanceListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/platforms/{platform}/softwares/{software}/instances",
            produces = {"application/json"}
    )

    default ResponseEntity<InstanceListResponse> listSoftwareInstances(
            @Parameter(name = "platform", description = "望京平面", required = true, in = ParameterIn.PATH) @PathVariable("platform") String platform,
            @Parameter(name = "software", description = "软件服务在k8s中的deployment名称", required = true, in = ParameterIn.PATH) @PathVariable("software") String software,
            @Parameter(name = "timeType", description = "表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeType", required = false) Integer timeType,
            @Parameter(name = "fromTime", description = "指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromTime", required = false) Long fromTime,
            @Parameter(name = "toTime", description = "指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "toTime", required = false) Long toTime,
            @Parameter(name = "recentSeconds", description = "timeType为1时，最近时间的秒数，整数", in = ParameterIn.QUERY) @Valid @RequestParam(value = "recentSeconds", required = false) Integer recentSeconds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"name\" : \"name\", \"resources\" : [ { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" }, { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" } ] }, { \"name\" : \"name\", \"resources\" : [ { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" }, { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" } ] } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
