/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.stardata.observ.vo.CommonResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.stardata.observ.vo.ConditionKeyListResponse;
import com.stardata.observ.vo.StringListResponse;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "查询条件", description = "the 查询条件 API")
public interface ConditionKeysApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /condition-keys : 查询条件key列表
     * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     *
     * @param type 1-span条件；2-log条件；3-metrics条件 (required)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "listConditionKeys",
            summary = "查询条件key列表",
            description = "查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。",
            tags = {"查询条件", "20240117", "要导出的接口", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ConditionKeyListResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/condition-keys",
            produces = {"application/json"}
    )

    default ResponseEntity<ConditionKeyListResponse> listConditionKeys(
            @NotNull @Parameter(name = "type", description = "1-span条件；2-log条件；3-metrics条件", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = true) Integer type
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"displayName\" : \"displayName\", \"dataType\" : \"N\", \"name\" : \"name\", \"id\" : 6 }, { \"displayName\" : \"displayName\", \"dataType\" : \"N\", \"name\" : \"name\", \"id\" : 6 } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /condition-keys/{keyId}/values : 查询条件某key取值列表
     * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     *
     * @param keyId 查询条件key的主键ID (required)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "listConditionValues",
            summary = "查询条件某key取值列表",
            description = "查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。",
            tags = {"查询条件", "要导出的接口", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = StringListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/condition-keys/{keyId}/values",
            produces = {"application/json"}
    )

    default ResponseEntity<StringListResponse> listConditionValues(
            @Parameter(name = "keyId", description = "查询条件key的主键ID", required = true, in = ParameterIn.PATH) @PathVariable("keyId") Long keyId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ \"data\", \"data\" ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
