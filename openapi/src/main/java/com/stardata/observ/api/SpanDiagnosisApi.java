/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stardata.observ.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.stardata.observ.vo.CommonResponse;
import com.stardata.observ.vo.Percentile;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.stardata.observ.vo.DurationTrendResponse;
import com.stardata.observ.vo.DurationType;
import com.stardata.observ.vo.InitialCauseAppInstanceListResponse;
import com.stardata.observ.vo.InitialCauseSpanListResponse;
import com.stardata.observ.vo.ServiceErrorDiagnosisResponse;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "服务诊断", description = "the 服务诊断 API")
public interface SpanDiagnosisApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /span-diagnosis/app-instances : span诊断异常应用实例解析
     * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
     *
     * @param spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。 (required)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "getSpanAppInstances",
            summary = "span诊断异常应用实例解析",
            description = "获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。",
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InitialCauseAppInstanceListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-diagnosis/app-instances",
            produces = {"application/json"}
    )

    default ResponseEntity<InitialCauseAppInstanceListResponse> getSpanAppInstances(
            @NotNull @Parameter(name = "spanSnapshotId", description = "span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "spanSnapshotId", required = true) List<String> spanSnapshotId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : [ { \"cluster\" : \"cluster\", \"instance\" : \"instance\", \"application\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"software\" : \"software\", \"exceptionCount\" : 6, \"serviceMonitorUrl\" : \"serviceMonitorUrl\", \"callCount\" : 1, \"resources\" : [ { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" }, { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" } ], \"serviceName\" : \"serviceName\", \"platform\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"spanName\" : \"spanName\" }, { \"cluster\" : \"cluster\", \"instance\" : \"instance\", \"application\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"software\" : \"software\", \"exceptionCount\" : 6, \"serviceMonitorUrl\" : \"serviceMonitorUrl\", \"callCount\" : 1, \"resources\" : [ { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" }, { \"monitorURL\" : \"monitorURL\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"logo\" : \"logo\", \"id\" : \"id\", \"type\" : \"type\" } ], \"serviceName\" : \"serviceName\", \"platform\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"spanName\" : \"spanName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-diagnosis/duration-trend : span诊断时延趋势解析
     * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
     *
     * @param spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。 (required)
     * @param percentiles    需查询的统计比率 (optional)
     * @param durationTypes  需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延 (optional)
     * @param granularity    解析趋势的时间颗粒度，单位是秒，空表示自动。 (optional)
     * @param fromTime       计算时延趋势的起始时间，UNIX时间戳 (optional)
     * @param toTime         计算时延趋势的截止时间，UNIX时间戳 (optional)
     * @return 成功 (status code 200)
     */
    @Operation(
            operationId = "getSpanDurationTrends",
            summary = "span诊断时延趋势解析",
            description = "获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。",
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DurationTrendResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-diagnosis/duration-trend",
            produces = {"application/json"}
    )

    default ResponseEntity<DurationTrendResponse> getSpanDurationTrends(
            @NotNull @Parameter(name = "spanSnapshotId", description = "span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "spanSnapshotId", required = true) List<String> spanSnapshotId,
            @Parameter(name = "percentiles", description = "需查询的统计比率", in = ParameterIn.QUERY) @Valid @RequestParam(value = "percentiles", required = false) List<@Valid Percentile> percentiles,
            @Parameter(name = "durationTypes", description = "需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延", in = ParameterIn.QUERY) @Valid @RequestParam(value = "durationTypes", required = false) List<@Valid DurationType> durationTypes,
            @Parameter(name = "granularity", description = "解析趋势的时间颗粒度，单位是秒，空表示自动。", in = ParameterIn.QUERY) @Valid @RequestParam(value = "granularity", required = false) Integer granularity,
            @Parameter(name = "fromTime", description = "计算时延趋势的起始时间，UNIX时间戳", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromTime", required = false) Long fromTime,
            @Parameter(name = "toTime", description = "计算时延趋势的截止时间，UNIX时间戳", in = ParameterIn.QUERY) @Valid @RequestParam(value = "toTime", required = false) Long toTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"traceDurations\" : [ [ 5, 5 ], [ 5, 5 ] ], \"percentile\" : [ null, null ], \"granularity\" : 73, \"fromTime\" : 6, \"selfDurations\" : [ [ 2, 2 ], [ 2, 2 ] ], \"gaps\" : [ [ 7, 7 ], [ 7, 7 ] ], \"toTime\" : 1 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-diagnosis/exception-analysis : span诊断报错解析
     * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
     *
     * @param spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。 (required)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "getSpanExceptionAnalysis",
            summary = "span诊断报错解析",
            description = "根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。",
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceErrorDiagnosisResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-diagnosis/exception-analysis",
            produces = {"application/json"}
    )

    default ResponseEntity<ServiceErrorDiagnosisResponse> getSpanExceptionAnalysis(
            @NotNull @Parameter(name = "spanSnapshotId", description = "span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "spanSnapshotId", required = true) List<String> spanSnapshotId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"spanCount\" : 6, \"categories\" : [ { \"spanCount\" : 5, \"categoryName\" : \"categoryName\", \"categoryId\" : 1, \"exceptions\" : [ { \"spanCount\" : 2, \"exceptionId\" : 5, \"rootExceptionBody\" : \"rootExceptionBody\", \"exceptionName\" : \"exceptionName\" }, { \"spanCount\" : 2, \"exceptionId\" : 5, \"rootExceptionBody\" : \"rootExceptionBody\", \"exceptionName\" : \"exceptionName\" } ] }, { \"spanCount\" : 5, \"categoryName\" : \"categoryName\", \"categoryId\" : 1, \"exceptions\" : [ { \"spanCount\" : 2, \"exceptionId\" : 5, \"rootExceptionBody\" : \"rootExceptionBody\", \"exceptionName\" : \"exceptionName\" }, { \"spanCount\" : 2, \"exceptionId\" : 5, \"rootExceptionBody\" : \"rootExceptionBody\", \"exceptionName\" : \"exceptionName\" } ] } ] }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /span-diagnosis/trace-faults : 初因span列表
     *
     * @param spanSnapshotId span快照ID (required)
     * @param pageNo         (optional)
     * @param pageSize       (optional)
     * @return 成功 (status code 200)
     * or 数据不存在 (status code 404)
     */
    @Operation(
            operationId = "getTraceFaults",
            summary = "初因span列表",
            description = "",
            tags = {"服务诊断", "20240208"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InitialCauseSpanListResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "数据不存在", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CommonResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/span-diagnosis/trace-faults",
            produces = {"application/json"}
    )

    default ResponseEntity<InitialCauseSpanListResponse> getTraceFaults(
            @NotNull @Parameter(name = "spanSnapshotId", description = "span快照ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "spanSnapshotId", required = true) String spanSnapshotId,
            @Parameter(name = "pageNo", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNo", required = false) Integer pageNo,
            @Parameter(name = "pageSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"data\" : { \"spans\" : [ { \"traceId\" : \"traceId\", \"cluster\" : \"cluster\", \"rootSpanName\" : \"rootSpanName\", \"instance\" : \"instance\", \"selfDuration\" : 3, \"serviceName\" : \"serviceName\", \"platform\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"spanName\" : \"spanName\", \"peerAddress\" : \"peerAddress\", \"spanId\" : \"spanId\", \"duration\" : 7, \"localAddress\" : \"localAddress\", \"gap\" : 9, \"rootServiceName\" : \"rootServiceName\", \"timestamp\" : 2 }, { \"traceId\" : \"traceId\", \"cluster\" : \"cluster\", \"rootSpanName\" : \"rootSpanName\", \"instance\" : \"instance\", \"selfDuration\" : 3, \"serviceName\" : \"serviceName\", \"platform\" : { \"displayName\" : \"displayName\", \"name\" : \"name\" }, \"spanName\" : \"spanName\", \"peerAddress\" : \"peerAddress\", \"spanId\" : \"spanId\", \"duration\" : 7, \"localAddress\" : \"localAddress\", \"gap\" : 9, \"rootServiceName\" : \"rootServiceName\", \"timestamp\" : 2 } ], \"pageCount\" : 5, \"pageNo\" : 6, \"pageSize\" : 1, \"totalCount\" : 5 }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
